{"version":3,"sources":["shared/components/FormElements/ImageUpload.js","places/pages/NewPlace.js"],"names":["ImageUpload","props","useState","file","setFile","previewUrl","setPreviewUrl","isValid","setIsValid","filePickerRef","useRef","useEffect","fileReader","FileReader","onload","result","readAsDataURL","className","id","ref","style","display","type","accept","onChange","event","pickedFile","fileIsValid","target","files","length","onInput","center","src","alt","onClick","current","click","errorText","NewPlace","auth","useContext","AuthContext","useHttpClient","isLoading","error","sendRequest","clearError","useForm","title","value","description","address","image","formState","inputHandler","history","useHistory","placeSubmitHandler","a","preventDefault","formData","FormData","append","inputs","process","Authorization","token","push","Fragment","onClear","onSubmit","asOverlay","element","label","validators","VALIDATOR_REQUIRE","VALIDATOR_MINLENGTH","disabled"],"mappings":"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","file":"static/js/8.708cb647.chunk.js","sourcesContent":["import React, { useRef, useState, useEffect } from 'react';\n\nimport Button from './Button';\nimport './ImageUpload.css';\n\nconst ImageUpload = props => {\n  const [file, setFile] = useState();\n  const [previewUrl, setPreviewUrl] = useState();\n  const [isValid, setIsValid] = useState(false);\n\n  const filePickerRef = useRef();\n\n  useEffect(() => {\n    if (!file) {\n      return;\n    }\n    const fileReader = new FileReader();\n    fileReader.onload = () => {\n      setPreviewUrl(fileReader.result);\n    };\n    fileReader.readAsDataURL(file);\n  }, [file]);\n\n  const pickedHandler = event => {\n    let pickedFile;\n    let fileIsValid = isValid;\n    if (event.target.files && event.target.files.length === 1) {\n      pickedFile = event.target.files[0];\n      setFile(pickedFile);\n      setIsValid(true);\n      fileIsValid = true;\n    } else {\n      setIsValid(false);\n      fileIsValid = false;\n    }\n    props.onInput(props.id, pickedFile, fileIsValid);\n  };\n\n  const pickImageHandler = () => {\n    filePickerRef.current.click();\n  };\n\n  return (\n    <div className=\"form-control\">\n      <input\n        id={props.id}\n        ref={filePickerRef}\n        style={{ display: 'none' }}\n        type=\"file\"\n        accept=\".jpg,.png,.jpeg\"\n        onChange={pickedHandler}\n      />\n      <div className={`image-upload ${props.center && 'center'}`}>\n        <div className=\"image-upload__preview\">\n          {previewUrl && <img src={previewUrl} alt=\"Preview\" />}\n          {!previewUrl && <p>Please pick an image.</p>}\n        </div>\n        <Button type=\"button\" onClick={pickImageHandler}>\n          PICK IMAGE\n        </Button>\n      </div>\n      {!isValid && <p>{props.errorText}</p>}\n    </div>\n  );\n};\n\nexport default ImageUpload;\n","import React, { useState, useContext } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nimport Input from '../../shared/components/FormElements/Input';\r\nimport Button from '../../shared/components/FormElements/Button';\r\nimport ErrorModal from '../../shared/components/UIElements/ErrorModal';\r\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\r\nimport ImageUpload from '../../shared/components/FormElements/ImageUpload';\r\n\r\nimport { VALIDATOR_REQUIRE, VALIDATOR_MINLENGTH } from '../../shared/util/validators';\r\nimport { useForm } from '../../shared/hooks/form-hook';\r\nimport { useHttpClient } from '../../shared/hooks/http-hook';\r\nimport { AuthContext } from '../../shared/context/auth-context';\r\n\r\nimport './PlaceForm.css';\r\n\r\n\r\nconst NewPlace = () => {\r\n    const auth = useContext(AuthContext);\r\n    const { isLoading, error, sendRequest, clearError } = useHttpClient();\r\n    const [formState, inputHandler] = useForm(\r\n        {\r\n            title: {\r\n                value: '',\r\n                isValid: false\r\n            },\r\n            description: {\r\n                value: '',\r\n                isValid: false\r\n            },\r\n            address: {\r\n                value: '',\r\n                isValid: false\r\n            },\r\n            image: {\r\n                value: null,\r\n                isValid: false\r\n            }\r\n        },\r\n        false\r\n    )\r\n\r\n    const history = useHistory();\r\n\r\n    const placeSubmitHandler = async event => {\r\n        event.preventDefault();\r\n        try {\r\n            const formData = new FormData();\r\n            formData.append('title', formState.inputs.title.value);\r\n            formData.append('description', formState.inputs.description.value);\r\n            formData.append('address', formState.inputs.address.value);\r\n            formData.append('image', formState.inputs.image.value);\r\n            await sendRequest(\r\n                process.env.REACT_APP_BACKEND_URL + '/places',\r\n                'POST',\r\n                formData,\r\n                {\r\n                    Authorization: 'Bearer ' + auth.token\r\n                }\r\n            )\r\n            history.push('/');\r\n        } catch(err) {}\r\n    };\r\n    \r\n    return (\r\n        <React.Fragment>\r\n            <ErrorModal error={error} onClear={clearError} />\r\n            <form className=\"place-form\" onSubmit={placeSubmitHandler}>\r\n                {isLoading && <LoadingSpinner asOverlay />}\r\n                <Input\r\n                    id=\"title\"\r\n                    element=\"input\"\r\n                    type=\"text\"\r\n                    label=\"Title\"\r\n                    validators={[VALIDATOR_REQUIRE()]}\r\n                    errorText=\"Please enter a valid text\"\r\n                    onInput={inputHandler}\r\n                />\r\n                <Input\r\n                    id=\"description\"\r\n                    element=\"textarea\"\r\n                    label=\"Description\"\r\n                    validators={[VALIDATOR_REQUIRE(), VALIDATOR_MINLENGTH(5)]}\r\n                    errorText=\"Description with atleast 5 characters\"\r\n                    onInput={inputHandler}\r\n                />\r\n                <Input\r\n                    id=\"address\"\r\n                    element=\"input\"\r\n                    label=\"Address\"\r\n                    validators={[VALIDATOR_REQUIRE()]}\r\n                    errorText=\"Please Enter a valid address\"\r\n                    onInput={inputHandler}\r\n                />\r\n                <ImageUpload id=\"image\" onInput={inputHandler} errorText=\"Please provide an image\" />\r\n                <Button type=\"submit\" disabled={!formState.isValid}>ADD PLACE</Button>\r\n            </form>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default NewPlace;"],"sourceRoot":""}