{"version":3,"sources":["places/pages/UpdatePlace.js"],"names":["UpdatePlace","props","auth","useContext","AuthContext","useHttpClient","isLoading","error","sendRequest","clearError","useState","loadedPlace","setLoadedPlace","placeId","useParams","history","useHistory","useForm","title","value","isValid","description","formState","inputHandler","setFormData","useEffect","a","process","responseData","place","fetchPlace","placeUpdateSubmitHandler","event","preventDefault","JSON","stringify","inputs","Authorization","token","push","userId","className","Fragment","onClear","onSubmit","id","element","type","label","validators","VALIDATOR_REQUIRE","errorText","onInput","initialValue","initialValid","VALIDATOR_MINLENGTH","disabled"],"mappings":"mQA+HeA,UA9GK,SAAAC,GAChB,IAAMC,EAAOC,qBAAWC,KADC,EAE6BC,cAA9CC,EAFiB,EAEjBA,UAAWC,EAFM,EAENA,MAAOC,EAFD,EAECA,YAAaC,EAFd,EAEcA,WAFd,EAGeC,qBAHf,mBAGjBC,EAHiB,KAGJC,EAHI,KAInBC,EAAUC,cAAYD,QACtBE,EAAUC,cALS,EAOsBC,YAAQ,CACnDC,MAAO,CACHC,MAAO,GACPC,SAAS,GAEbC,YAAa,CACTF,MAAO,GACPC,SAAS,KAEd,GAhBsB,mBAOlBE,EAPkB,KAOPC,EAPO,KAOOC,EAPP,KAkBzBC,qBAAU,YACU,uCAAG,4BAAAC,EAAA,+EAEgBlB,EAAY,GAAD,OAAImB,4BAAJ,mBAAgDd,IAF3E,OAELe,EAFK,OAIXhB,EAAegB,EAAaC,OAC5BL,EAAY,CACRN,MAAO,CACHC,MAAOS,EAAaC,MAAMX,MAC1BE,SAAS,GAEbC,YAAa,CACTF,MAAOS,EAAaC,MAAMR,YAC1BD,SAAS,KAEd,GAdQ,yGAAH,qDAiBhBU,KACD,CAACtB,EAAaK,EAASW,IAI1B,IAAMO,EAAwB,uCAAG,WAAMC,GAAN,SAAAN,EAAA,6DAC7BM,EAAMC,iBADuB,kBAGnBzB,EAAY,GAAD,OACVmB,4BADU,mBACkCd,GAC/C,QACAqB,KAAKC,UAAU,CACXjB,MAAOI,EAAUc,OAAOlB,MAAMC,MAC9BE,YAAaC,EAAUc,OAAOf,YAAYF,QAE9C,CACI,eAAgB,mBAChBkB,cAAe,UAAYnC,EAAKoC,QAZf,OAezBvB,EAAQwB,KAAK,IAAMrC,EAAKsC,OAAS,WAfR,uGAAH,sDAmB9B,OAAIlC,EAEI,yBAAKmC,UAAU,UACX,2CAKP9B,GAAgBJ,EASjB,kBAAC,IAAMmC,SAAP,KACI,kBAAC,IAAD,CAAYnC,MAAOA,EAAOoC,QAASlC,KAChCH,GAAaK,GAAe,0BAAM8B,UAAU,aAAaG,SAAUb,GAClE,kBAAC,IAAD,CACIc,GAAG,QACHC,QAAQ,QACRC,KAAK,OACLC,MAAM,QACNC,WAAY,CAACC,eACbC,UAAU,6BACVC,QAAS7B,EACT8B,aAAc1C,EAAYO,MAC1BoC,aAAc3C,EAAYO,QAE9B,kBAAC,IAAD,CACI2B,GAAG,cACHC,QAAQ,QACRC,KAAK,OACLC,MAAM,cACNC,WAAY,CAACM,YAAoB,IACjCJ,UAAU,sDACVC,QAAS7B,EACT8B,aAAc1C,EAAYU,YAC1BiC,aAAc3C,EAAYU,cAE9B,kBAAC,IAAD,CAAQ0B,KAAK,SAASS,UAAWlC,EAAUF,SAA3C,kBAhCJ,yBAAKqB,UAAU,UACX,kBAAC,IAAD","file":"static/js/9.12dd1a30.chunk.js","sourcesContent":["import React, {useEffect, useState, useContext} from 'react';\r\nimport { useParams, useHistory } from 'react-router-dom';\r\n\r\nimport { VALIDATOR_REQUIRE, VALIDATOR_MINLENGTH } from '../../shared/util/validators';\r\n\r\nimport Input from '../../shared/components/FormElements/Input';\r\nimport Button from '../../shared/components/FormElements/Button';\r\n// import Card from '../../shared/components/UIElements/Card';\r\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\r\nimport ErrorModal from '../../shared/components/UIElements/ErrorModal';\r\n\r\nimport { useForm } from '../../shared/hooks/form-hook';\r\nimport { useHttpClient } from '../../shared/hooks/http-hook';\r\nimport { AuthContext } from '../../shared/context/auth-context';\r\n\r\nimport './PlaceForm.css';\r\n\r\nconst UpdatePlace = props => {\r\n    const auth = useContext(AuthContext);\r\n    const { isLoading, error, sendRequest, clearError } = useHttpClient();\r\n    const [ loadedPlace, setLoadedPlace ] = useState();\r\n    const placeId = useParams().placeId;\r\n    const history = useHistory();\r\n\r\n    const [formState, inputHandler, setFormData] = useForm({\r\n        title: {\r\n            value: '',\r\n            isValid: false\r\n        },\r\n        description: {\r\n            value: '',\r\n            isValid: false\r\n        }\r\n    }, false);\r\n\r\n    useEffect(() => {\r\n        const fetchPlace = async () => {\r\n            try {\r\n                const responseData = await sendRequest(`${process.env.REACT_APP_BACKEND_URL}/places/${placeId}`);\r\n\r\n                setLoadedPlace(responseData.place);\r\n                setFormData({\r\n                    title: {\r\n                        value: responseData.place.title,\r\n                        isValid: true\r\n                    },\r\n                    description: {\r\n                        value: responseData.place.description,\r\n                        isValid: true\r\n                    }\r\n                }, true);\r\n            } catch(err) {}\r\n        }\r\n        fetchPlace();\r\n    }, [sendRequest, placeId, setFormData])\r\n\r\n    \r\n\r\n    const placeUpdateSubmitHandler = async event => {\r\n        event.preventDefault();\r\n        try {\r\n            await sendRequest(\r\n                `${process.env.REACT_APP_BACKEND_URL}/places/${placeId}`,\r\n                'PATCH',\r\n                JSON.stringify({\r\n                    title: formState.inputs.title.value,\r\n                    description: formState.inputs.description.value\r\n                }),\r\n                {\r\n                    'Content-Type': 'application/json',\r\n                    Authorization: 'Bearer ' + auth.token\r\n                }\r\n            );\r\n            history.push('/' + auth.userId + '/places');\r\n        } catch(err) {}\r\n    }\r\n\r\n    if (isLoading) {\r\n        return (\r\n            <div className=\"center\">\r\n                <h2>Loading...</h2>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    if (!loadedPlace && !error) {\r\n        return (\r\n            <div className=\"center\">\r\n                <LoadingSpinner />\r\n            </div>\r\n        )\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <ErrorModal error={error} onClear={clearError} />\r\n            { !isLoading && loadedPlace && <form className=\"place-form\" onSubmit={placeUpdateSubmitHandler}>\r\n                <Input\r\n                    id=\"title\"\r\n                    element=\"input\"\r\n                    type=\"text\"\r\n                    label=\"Title\"\r\n                    validators={[VALIDATOR_REQUIRE()]}\r\n                    errorText=\"Please enter a valid title\"\r\n                    onInput={inputHandler}\r\n                    initialValue={loadedPlace.title}\r\n                    initialValid={loadedPlace.title}\r\n                />\r\n                <Input\r\n                    id=\"description\"\r\n                    element=\"input\"\r\n                    type=\"text\"\r\n                    label=\"Description\"\r\n                    validators={[VALIDATOR_MINLENGTH(5)]}\r\n                    errorText=\"Please enter a valid description (5 min characters)\"\r\n                    onInput={inputHandler}\r\n                    initialValue={loadedPlace.description}\r\n                    initialValid={loadedPlace.description}\r\n                />\r\n                <Button type=\"submit\" disabled={!formState.isValid}>\r\n                    UPDATE PLACE\r\n                </Button>\r\n            </form> }\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default UpdatePlace;"],"sourceRoot":""}